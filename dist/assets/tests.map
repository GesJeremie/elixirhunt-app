{"version":3,"sources":["elixirhunt/tests/adapters/application.jshint.js","elixirhunt/tests/app.jshint.js","elixirhunt/tests/components/admin/header-component.jshint.js","elixirhunt/tests/components/admin/jobs/form-component.jshint.js","elixirhunt/tests/components/admin/sidebar-component.jshint.js","elixirhunt/tests/controllers/admin/auth/login.jshint.js","elixirhunt/tests/controllers/admin/index.jshint.js","elixirhunt/tests/controllers/admin/jobs/index.jshint.js","elixirhunt/tests/controllers/index.jshint.js","elixirhunt/tests/helpers/destroy-app.js","elixirhunt/tests/helpers/destroy-app.jshint.js","elixirhunt/tests/helpers/if-empty.jshint.js","elixirhunt/tests/helpers/markdown-decode.jshint.js","elixirhunt/tests/helpers/module-for-acceptance.js","elixirhunt/tests/helpers/module-for-acceptance.jshint.js","elixirhunt/tests/helpers/nl2br.jshint.js","elixirhunt/tests/helpers/resolver.js","elixirhunt/tests/helpers/resolver.jshint.js","elixirhunt/tests/helpers/start-app.js","elixirhunt/tests/helpers/start-app.jshint.js","elixirhunt/tests/initializers/inject-router.jshint.js","elixirhunt/tests/integration/components/sidebar-component-test.js","elixirhunt/tests/integration/components/sidebar-component-test.jshint.js","elixirhunt/tests/mixins/disabled-button.jshint.js","elixirhunt/tests/mixins/is-authenticated-admin.jshint.js","elixirhunt/tests/models/post.jshint.js","elixirhunt/tests/resolver.jshint.js","elixirhunt/tests/router.jshint.js","elixirhunt/tests/routes/404.jshint.js","elixirhunt/tests/routes/admin/index.jshint.js","elixirhunt/tests/routes/admin/jobs/edit.jshint.js","elixirhunt/tests/routes/admin/jobs/index.jshint.js","elixirhunt/tests/routes/admin/jobs/new.jshint.js","elixirhunt/tests/routes/index.jshint.js","elixirhunt/tests/routes/stats.jshint.js","elixirhunt/tests/serializers/post.jshint.js","elixirhunt/tests/services/auth-admin.jshint.js","elixirhunt/tests/services/keen.jshint.js","elixirhunt/tests/services/notification.jshint.js","elixirhunt/tests/test-helper.js","elixirhunt/tests/test-helper.jshint.js","elixirhunt/tests/unit/helpers/empty-test.js","elixirhunt/tests/unit/helpers/empty-test.jshint.js","elixirhunt/tests/unit/helpers/humanize-date-test.js","elixirhunt/tests/unit/helpers/humanize-date-test.jshint.js","elixirhunt/tests/unit/helpers/if-empty-test.js","elixirhunt/tests/unit/helpers/if-empty-test.jshint.js","elixirhunt/tests/unit/helpers/markdown-decode-test.js","elixirhunt/tests/unit/helpers/markdown-decode-test.jshint.js","elixirhunt/tests/unit/helpers/nl2br-test.js","elixirhunt/tests/unit/helpers/nl2br-test.jshint.js","elixirhunt/tests/unit/models/post-test.js","elixirhunt/tests/unit/models/post-test.jshint.js","elixirhunt/tests/unit/routes/admin/jobs/edit-test.js","elixirhunt/tests/unit/routes/admin/jobs/edit-test.jshint.js","elixirhunt/tests/unit/routes/admin/jobs/new-test.js","elixirhunt/tests/unit/routes/admin/jobs/new-test.jshint.js","elixirhunt/tests/unit/routes/index-test.js","elixirhunt/tests/unit/routes/index-test.jshint.js","elixirhunt/tests/unit/routes/stats-test.js","elixirhunt/tests/unit/routes/stats-test.jshint.js","elixirhunt/tests/unit/services/keen-test.js","elixirhunt/tests/unit/services/keen-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('elixirhunt/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 7, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nadapters/application.js: line 8, col 5, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('elixirhunt/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('elixirhunt/tests/components/admin/header-component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/admin/header-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/admin/header-component.js should pass jshint.\\ncomponents/admin/header-component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/header-component.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/components/admin/jobs/form-component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/admin/jobs/form-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/admin/jobs/form-component.js should pass jshint.\\ncomponents/admin/jobs/form-component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/jobs/form-component.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/jobs/form-component.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/jobs/form-component.js: line 5, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/admin/jobs/form-component.js: line 12, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/jobs/form-component.js: line 18, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/admin/jobs/form-component.js: line 25, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/admin/jobs/form-component.js: line 29, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/admin/jobs/form-component.js: line 39, col 14, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/jobs/form-component.js: line 44, col 15, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n10 errors');\n  });\n});","define('elixirhunt/tests/components/admin/sidebar-component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/admin/sidebar-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/admin/sidebar-component.js should pass jshint.\\ncomponents/admin/sidebar-component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/sidebar-component.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/admin/sidebar-component.js: line 7, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/admin/sidebar-component.js: line 8, col 39, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('elixirhunt/tests/controllers/admin/auth/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/admin/auth/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/auth/login.js should pass jshint.\\ncontrollers/admin/auth/login.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/admin/auth/login.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/admin/auth/login.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/admin/auth/login.js: line 8, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/admin/auth/login.js: line 14, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/admin/auth/login.js: line 23, col 7, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/admin/auth/login.js: line 26, col 14, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/admin/auth/login.js: line 31, col 14, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n8 errors');\n  });\n});","define('elixirhunt/tests/controllers/admin/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/admin/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/index.js should pass jshint.\\ncontrollers/admin/index.js: line 1, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/admin/index.js: line 2, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/controllers/admin/jobs/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/admin/jobs/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin/jobs/index.js should pass jshint.\\ncontrollers/admin/jobs/index.js: line 1, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/admin/jobs/index.js: line 4, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/controllers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/index.js should pass jshint.\\ncontrollers/index.js: line 1, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/index.js: line 28, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/index.js: line 32, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/index.js: line 47, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/index.js: line 51, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/index.js: line 58, col 27, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/index.js: line 66, col 30, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/index.js: line 67, col 47, Missing semicolon.\\ncontrollers/index.js: line 76, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/index.js: line 80, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/index.js: line 84, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n11 errors');\n  });\n});","define('elixirhunt/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('elixirhunt/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/helpers/if-empty.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/if-empty.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/if-empty.js should pass jshint.\\nhelpers/if-empty.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/if-empty.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/if-empty.js: line 4, col 3, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nhelpers/if-empty.js: line 5, col 3, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nhelpers/if-empty.js: line 14, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n5 errors');\n  });\n});","define('elixirhunt/tests/helpers/markdown-decode.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/markdown-decode.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/markdown-decode.js should pass jshint.\\nhelpers/markdown-decode.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/markdown-decode.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/markdown-decode.js: line 3, col 31, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nhelpers/markdown-decode.js: line 5, col 3, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nhelpers/markdown-decode.js: line 12, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n5 errors');\n  });\n});","define('elixirhunt/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'elixirhunt/tests/helpers/start-app', 'elixirhunt/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _elixirhuntTestsHelpersStartApp, _elixirhuntTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _elixirhuntTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _elixirhuntTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('elixirhunt/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/helpers/nl2br.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/nl2br.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/nl2br.js should pass jshint.\\nhelpers/nl2br.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/nl2br.js: line 3, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nhelpers/nl2br.js: line 3, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nhelpers/nl2br.js: line 8, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/nl2br.js: line 8, col 22, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nhelpers/nl2br.js: line 13, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n6 errors');\n  });\n});","define('elixirhunt/tests/helpers/resolver', ['exports', 'elixirhunt/resolver', 'elixirhunt/config/environment'], function (exports, _elixirhuntResolver, _elixirhuntConfigEnvironment) {\n\n  var resolver = _elixirhuntResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _elixirhuntConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _elixirhuntConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('elixirhunt/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/helpers/start-app', ['exports', 'ember', 'elixirhunt/app', 'elixirhunt/config/environment'], function (exports, _ember, _elixirhuntApp, _elixirhuntConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _elixirhuntConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _elixirhuntApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('elixirhunt/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/initializers/inject-router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/inject-router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'initializers/inject-router.js should pass jshint.\\ninitializers/inject-router.js: line 1, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ninitializers/inject-router.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/integration/components/sidebar-component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('sidebar-component', 'Integration | Component | sidebar component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'sidebar-component', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.7.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.7.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'sidebar-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('elixirhunt/tests/integration/components/sidebar-component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/sidebar-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/sidebar-component-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/mixins/disabled-button.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/disabled-button.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/disabled-button.js should pass jshint.\\nmixins/disabled-button.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmixins/disabled-button.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/mixins/is-authenticated-admin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/is-authenticated-admin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/is-authenticated-admin.js should pass jshint.\\nmixins/is-authenticated-admin.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmixins/is-authenticated-admin.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmixins/is-authenticated-admin.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nmixins/is-authenticated-admin.js: line 11, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nmixins/is-authenticated-admin.js: line 19, col 14, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nmixins/is-authenticated-admin.js: line 20, col 28, \\'spread/rest operator\\' is only available in ES6 (use \\'esversion: 6\\').\\nmixins/is-authenticated-admin.js: line 22, col 15, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('elixirhunt/tests/models/post.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/post.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/post.js should pass jshint.\\nmodels/post.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/post.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 26, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('elixirhunt/tests/routes/404.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/404.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/404.js should pass jshint.\\nroutes/404.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/404.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/404.js: line 5, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n3 errors');\n  });\n});","define('elixirhunt/tests/routes/admin/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/index.js should pass jshint.\\nroutes/admin/index.js: line 1, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/index.js: line 2, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/routes/admin/jobs/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/jobs/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/jobs/edit.js should pass jshint.\\nroutes/admin/jobs/edit.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/jobs/edit.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/routes/admin/jobs/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/jobs/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/jobs/index.js should pass jshint.\\nroutes/admin/jobs/index.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/jobs/index.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/jobs/index.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/jobs/index.js: line 5, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('elixirhunt/tests/routes/admin/jobs/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/jobs/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/jobs/new.js should pass jshint.\\nroutes/admin/jobs/new.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/jobs/new.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/jobs/new.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/admin/jobs/new.js: line 5, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n4 errors');\n  });\n});","define('elixirhunt/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass jshint.\\nroutes/index.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/index.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/index.js: line 5, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n3 errors');\n  });\n});","define('elixirhunt/tests/routes/stats.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/stats.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/stats.js should pass jshint.\\nroutes/stats.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/stats.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/stats.js: line 7, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n3 errors');\n  });\n});","define('elixirhunt/tests/serializers/post.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/post.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/post.js should pass jshint.\\nserializers/post.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/post.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('elixirhunt/tests/services/auth-admin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/auth-admin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/auth-admin.js should pass jshint.\\nservices/auth-admin.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/auth-admin.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/auth-admin.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/auth-admin.js: line 12, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/auth-admin.js: line 28, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/auth-admin.js: line 41, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/auth-admin.js: line 42, col 51, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/auth-admin.js: line 47, col 24, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/auth-admin.js: line 53, col 13, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n9 errors');\n  });\n});","define('elixirhunt/tests/services/keen.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/keen.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/keen.js should pass jshint.\\nservices/keen.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/keen.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/keen.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/keen.js: line 11, col 16, \\'template literal syntax\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/keen.js: line 10, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/keen.js: line 14, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/keen.js: line 16, col 9, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/keen.js: line 26, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/keen.js: line 27, col 9, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n9 errors');\n  });\n});","define('elixirhunt/tests/services/notification.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/notification.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/notification.js should pass jshint.\\nservices/notification.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/notification.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/notification.js: line 48, col 24, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('elixirhunt/tests/test-helper', ['exports', 'elixirhunt/tests/helpers/resolver', 'ember-qunit'], function (exports, _elixirhuntTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_elixirhuntTestsHelpersResolver['default']);\n});","define('elixirhunt/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/helpers/empty-test', ['exports', 'elixircave/helpers/empty', 'qunit'], function (exports, _elixircaveHelpersEmpty, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | empty');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _elixircaveHelpersEmpty.empty)([42]);\n    assert.ok(result);\n  });\n});","define('elixirhunt/tests/unit/helpers/empty-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/empty-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/empty-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/helpers/humanize-date-test', ['exports', 'elixircave/helpers/humanize-date', 'qunit'], function (exports, _elixircaveHelpersHumanizeDate, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | humanize date');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _elixircaveHelpersHumanizeDate.humanizeDate)([42]);\n    assert.ok(result);\n  });\n});","define('elixirhunt/tests/unit/helpers/humanize-date-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/humanize-date-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/humanize-date-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/helpers/if-empty-test', ['exports', 'elixircave/helpers/if-empty', 'qunit'], function (exports, _elixircaveHelpersIfEmpty, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | if empty');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _elixircaveHelpersIfEmpty.ifEmpty)([42]);\n    assert.ok(result);\n  });\n});","define('elixirhunt/tests/unit/helpers/if-empty-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/if-empty-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/if-empty-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/helpers/markdown-decode-test', ['exports', 'elixircave/helpers/markdown-decode', 'qunit'], function (exports, _elixircaveHelpersMarkdownDecode, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | markdown decode');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _elixircaveHelpersMarkdownDecode.markdownDecode)([42]);\n    assert.ok(result);\n  });\n});","define('elixirhunt/tests/unit/helpers/markdown-decode-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/markdown-decode-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/markdown-decode-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/helpers/nl2br-test', ['exports', 'elixircave/helpers/nl2br', 'qunit'], function (exports, _elixircaveHelpersNl2br, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | nl2br');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _elixircaveHelpersNl2br.nl2br)([42]);\n    assert.ok(result);\n  });\n});","define('elixirhunt/tests/unit/helpers/nl2br-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/nl2br-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/nl2br-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/models/post-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('post', 'Unit | Model | post', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('elixirhunt/tests/unit/models/post-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/post-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/post-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/routes/admin/jobs/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/jobs/edit', 'Unit | Route | admin/jobs/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('elixirhunt/tests/unit/routes/admin/jobs/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/jobs/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/jobs/edit-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/routes/admin/jobs/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/jobs/new', 'Unit | Route | admin/jobs/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('elixirhunt/tests/unit/routes/admin/jobs/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/jobs/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/jobs/new-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('elixirhunt/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/routes/stats-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:stats', 'Unit | Route | stats', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('elixirhunt/tests/unit/routes/stats-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/stats-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/stats-test.js should pass jshint.');\n  });\n});","define('elixirhunt/tests/unit/services/keen-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:keen', 'Unit | Service | keen', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('elixirhunt/tests/unit/services/keen-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/keen-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/keen-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('elixirhunt/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjfile":"tests.js"}